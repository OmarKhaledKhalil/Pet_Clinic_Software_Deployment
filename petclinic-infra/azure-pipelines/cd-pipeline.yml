trigger:
- main

variables:
  - group: AWS_Temporary_Credentials

stages:
- stage: Deploy
  jobs:
  - job: DeployToAWS
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      persistCredentials: true  # Ensures the pipeline has access to repo credentials

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          try {
            # Export AWS credentials from secrets
            Write-Host "Exporting AWS credentials..."
            $env:AWS_ACCESS_KEY_ID = "${{ secrets.AWS_ACCESS_KEY_ID }}"
            $env:AWS_SECRET_ACCESS_KEY = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            $env:AWS_SESSION_TOKEN = "${{ secrets.AWS_SESSION_TOKEN }}"

            # Navigate to Terraform directory
            Write-Host "Changing to Terraform directory..."
            Set-Location -Path './terraform'
            
            # Initialize Terraform
            Write-Host "Initializing Terraform..."
            terraform init
            
            # Apply Terraform configuration
            Write-Host "Applying Terraform configuration..."
            terraform apply -auto-approve
          } catch {
            Write-Error "Terraform execution failed: $_"
            throw $_
          }
      displayName: 'Run Terraform'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          try {
            # Change to Ansible directory
            Write-Host "Changing to Ansible directory..."
            Set-Location -Path './ansible'
            
            # Generate Ansible inventory
            Write-Host "Generating Ansible inventory..."
            & ./generate_inventory.sh

            # Run Ansible playbook
            Write-Host "Executing Ansible playbook..."
            ansible-playbook -i ./inventory/hosts.ini site.yml
          } catch {
            Write-Error "Ansible execution failed: $_"
            throw $_
          }
      displayName: 'Run Ansible'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          try {
            # Configure kubectl using kubeconfig
            Write-Host "Configuring kubectl..."
            echo "$env:KUBECONFIG_FILE_CONTENT" | Out-File -FilePath "$(Build.SourcesDirectory)\kubeconfig"
            $env:KUBECONFIG="$(Build.SourcesDirectory)\kubeconfig"

             # Apply Kubernetes manifests in the correct order
            Write-Host "Deploying Kubernetes manifests in the correct order..."
            kubectl apply -f k8s-manifests/dev/db-deployment.yaml  # Deploy DB first
            kubectl apply -f k8s-manifests/dev/memcache-deployment.yaml  # Deploy Cache
            kubectl apply -f k8s-manifests/dev/rabbitmq-deployment.yaml  # Deploy RabbitMQ
            kubectl apply -f k8s-manifests/dev/ingress.yaml  # Deploy Ingress
            kubectl apply -f k8s-manifests/dev/app-deployment.yaml  # Deploy App last
          } catch {
            Write-Error "Kubernetes deployment failed: $_"
            throw $_
          }
      displayName: 'Deploy Kubernetes Manifests'
      env:
        KUBECONFIG_FILE_CONTENT: $(KUBECONFIG_FILE_CONTENT)