pipeline {
    agent any

    environment {
        TF_DIR = "petclinic-infra/terraform"
        ANSIBLE_DIR = "petclinic-infra/ansible"
        JENKINS_IP = "147.161.245.100"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/OmarKhaledKhalil/Pet_Clinic_Software_Deployment.git', branch: 'master'
            }
        }

        stage('Terraform Init, Plan & Apply') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh '''
                            echo "üîê Exporting AWS credentials"
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                            export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN

                            echo "üöÄ Running Terraform with Jenkins IP: ${JENKINS_IP}"
                            terraform init
                            terraform plan \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"
                            terraform apply -auto-approve \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"
                        '''
                    }
                }
            }
        }

        stage('Wait for EC2 Boot') {
            steps {
                echo "‚è≥ Waiting 100 seconds for EC2 instances to boot..."
                sleep time: 0, unit: 'SECONDS'
            }
        }

        stage('Generate Ansible Inventory and Run Ansible Playbook') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        sh '''
                            chmod -R u+w "$WORKSPACE"
                            cp "$SSH_KEY" mykey.pem
                            chmod 400 mykey.pem
                            chmod +x generate_inventory.sh
                            ./generate_inventory.sh mykey.pem
                            ./distribute_repos.sh mykey.pem
                            ansible-playbook -i inventory/hosts.ini site.yml --private-key mykey.pem -u ec2-user
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Infrastructure and Kubernetes setup completed successfully."
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
    }
}
