pipeline {
    agent any

    environment {
        TF_DIR = "petclinic-infra/terraform"
        ANSIBLE_DIR = "petclinic-infra/ansible"
        JENKINS_IP = "147.161.245.79"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "üì• Checking out code from GitHub"
                git url: 'https://github.com/OmarKhaledKhalil/Pet_Clinic_Software_Deployment.git', branch: 'master'
            }
        }

        stage('Terraform Init, Plan & Apply') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh '''
                            echo "üîê Exporting AWS credentials"
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                            export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN

                            echo "üìç Current Directory: $(pwd)"
                            echo "üß™ Running terraform init"
                            terraform init

                            echo "üìê Running terraform plan with:"
                            echo "   - Jenkins IP: ${JENKINS_IP}"
                            terraform plan \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"

                            echo "üöÄ Running terraform apply with:"
                            terraform apply -auto-approve \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"
                        '''
                    }
                }
            }
        }

        stage('Wait for EC2 Boot') {
            steps {
                echo "‚è≥ Waiting 100 seconds to allow EC2 instances to initialize..."
                sleep time: 100, unit: 'SECONDS'
            }
        }

        stage('Generate Ansible Inventory') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        sh '''
                            echo "üîê SSH Key Path: $SSH_KEY"
                            echo "üîß Preparing inventory generation script"
                            chmod 400 $SSH_KEY
                            chmod +x generate_inventory.sh

                            echo "‚öôÔ∏è Running generate_inventory.sh..."
                            ./generate_inventory.sh $SSH_KEY
                        '''
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
    steps {
        dir("${ANSIBLE_DIR}") {
            withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                sh '''
                    echo "üìÇ Showing inventory file:"
                    cat inventory/hosts.ini

                    echo "üîê Fixing SSH key permissions"
                    chmod 400 $SSH_KEY

                    echo "üîå Testing raw SSH connectivity to master through bastion..."
                    MASTER_IP=$(grep -A1 "\\[master\\]" inventory/hosts.ini | tail -n1 | awk '{print $1}')
                    BASTION_IP=$(echo "$MASTER_IP" | grep -oP "(?<=@).+?(?=\\s)")
                    ssh -i $SSH_KEY -o ProxyJump=ec2-user@$BASTION_IP -o StrictHostKeyChecking=no ec2-user@$MASTER_IP 'echo "‚úÖ SSH to master successful"'

                    echo "üì° Testing Ansible connection with ping module..."
                    ansible -i inventory/hosts.ini all -m ping --private-key $SSH_KEY || echo "‚ùå Ansible ping failed"

                    echo "üöÄ Running main Ansible playbook..."
                    ansible-playbook -i inventory/hosts.ini site.yml --private-key $SSH_KEY
                '''
            }
        }
    }
}
    }

    post {
        success {
            echo "‚úÖ All pipeline stages completed successfully."
        }
        failure {
            echo "‚ùå Pipeline failed. Please check above logs carefully."
        }
    }
}
