pipeline {
    agent any

    environment {
        TF_DIR = "petclinic-infra/terraform"
        ANSIBLE_DIR = "petclinic-infra/ansible"
        JENKINS_IP = "147.161.245.79"
    }

    stages {

        stage('üì• Checkout Code') {
            steps {
                echo "Checking out code from GitHub repository..."
                git url: 'https://github.com/OmarKhaledKhalil/Pet_Clinic_Software_Deployment.git', branch: 'master'
            }
        }

        stage('üîß Terraform Init, Plan & Apply') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh '''
                            echo "üîê Setting AWS credentials"
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                            export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN

                            echo "üìç Directory: $(pwd)"
                            terraform init

                            echo "üìê Running Terraform Plan"
                            terraform plan \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"

                            echo "üöÄ Applying Terraform Infrastructure"
                            terraform apply -auto-approve \
                                -var="key_pair=jenkins-key" \
                                -var="jenkins_host_ip=${JENKINS_IP}" \
                                -var="ci_host_ip=${JENKINS_IP}"
                        '''
                    }
                }
            }
        }

        stage('‚è≥ Wait for EC2 Initialization') {
            steps {
                echo "Waiting 100 seconds for EC2 instances to boot..."
                sleep time: 100, unit: 'SECONDS'
            }
        }

        stage('üìù Generate Ansible Inventory') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')
                    ]) {
                        sh '''
                            echo "üîê SSH Key Path: $SSH_KEY"
                            chmod 400 $SSH_KEY
                            chmod +x generate_inventory.sh

                            echo "‚öôÔ∏è Generating inventory file..."
                            ./generate_inventory.sh $SSH_KEY
                        '''
                    }
                }
            }
        }

        stage('üöÄ Run Ansible Playbook') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')
                    ]) {
                        sh '''
                            echo "üìÑ Displaying inventory:"
                            cat inventory/hosts.ini

                            echo "üîë Fixing SSH permissions"
                            chmod 400 $SSH_KEY

                            echo "üîå Testing SSH connection to master via bastion..."
                            MASTER_IP=$(grep -A1 "\\[master\\]" inventory/hosts.ini | tail -n1 | awk '{print $1}')
                            BASTION_IP=$(grep -A1 "\\[bastion\\]" inventory/hosts.ini | tail -n1 | awk '{print $1}')

                            ssh -i $SSH_KEY -o ProxyJump=ec2-user@$BASTION_IP -o StrictHostKeyChecking=no ec2-user@$MASTER_IP 'echo "‚úÖ SSH to master successful"'

                            echo "üì° Pinging all nodes with Ansible"
                            ansible -i inventory/hosts.ini all -m ping --private-key $SSH_KEY || echo "‚ùå Ansible ping failed"

                            echo "üìú Running main playbook"
                            ansible-playbook -i inventory/hosts.ini site.yml --private-key $SSH_KEY
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
    }
}
